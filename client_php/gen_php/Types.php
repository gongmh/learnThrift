<?php
namespace gen_php;

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Exception\TApplicationException;


final class enumType {
  const FIRST = 0;
  const SECOND = 1;
  static public $__names = array(
    0 => 'FIRST',
    1 => 'SECOND',
  );
}

class struceType {
  static $_TSPEC;

  public $one = null;
  public $two = null;
  public $three = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'one',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'two',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'three',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['one'])) {
        $this->one = $vals['one'];
      }
      if (isset($vals['two'])) {
        $this->two = $vals['two'];
      }
      if (isset($vals['three'])) {
        $this->three = $vals['three'];
      }
    }
  }

  public function getName() {
    return 'struceType';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->one);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->two);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->three);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('struceType');
    if ($this->one !== null) {
      $xfer += $output->writeFieldBegin('one', TType::I32, 1);
      $xfer += $output->writeI32($this->one);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->two !== null) {
      $xfer += $output->writeFieldBegin('two', TType::I64, 2);
      $xfer += $output->writeI64($this->two);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->three !== null) {
      $xfer += $output->writeFieldBegin('three', TType::STRING, 3);
      $xfer += $output->writeString($this->three);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class requestType {
  static $_TSPEC;

  public $one = null;
  public $two = null;
  public $three = null;
  public $four =   0;
  public $five = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'one',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'two',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'three',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'four',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'five',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['one'])) {
        $this->one = $vals['one'];
      }
      if (isset($vals['two'])) {
        $this->two = $vals['two'];
      }
      if (isset($vals['three'])) {
        $this->three = $vals['three'];
      }
      if (isset($vals['four'])) {
        $this->four = $vals['four'];
      }
      if (isset($vals['five'])) {
        $this->five = $vals['five'];
      }
    }
  }

  public function getName() {
    return 'requestType';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->one);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->two);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->three = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->three []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->four);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->five = array();
            $_size6 = 0;
            $_ktype7 = 0;
            $_vtype8 = 0;
            $xfer += $input->readMapBegin($_ktype7, $_vtype8, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $key11 = '';
              $val12 = '';
              $xfer += $input->readString($key11);
              $xfer += $input->readString($val12);
              $this->five[$key11] = $val12;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('requestType');
    if ($this->one !== null) {
      $xfer += $output->writeFieldBegin('one', TType::I32, 1);
      $xfer += $output->writeI32($this->one);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->two !== null) {
      $xfer += $output->writeFieldBegin('two', TType::STRING, 2);
      $xfer += $output->writeString($this->two);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->three !== null) {
      if (!is_array($this->three)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('three', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->three));
        {
          foreach ($this->three as $iter13)
          {
            $xfer += $output->writeString($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->four !== null) {
      $xfer += $output->writeFieldBegin('four', TType::I32, 4);
      $xfer += $output->writeI32($this->four);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->five !== null) {
      if (!is_array($this->five)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('five', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->five));
        {
          foreach ($this->five as $kiter14 => $viter15)
          {
            $xfer += $output->writeString($kiter14);
            $xfer += $output->writeString($viter15);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class responseType {
  static $_TSPEC;

  public $errno = 0;
  public $errmsg = "OK";
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'errno',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'errmsg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'data',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\gen_php\struceType',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['errno'])) {
        $this->errno = $vals['errno'];
      }
      if (isset($vals['errmsg'])) {
        $this->errmsg = $vals['errmsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'responseType';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errno);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errmsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->data = array();
            $_size16 = 0;
            $_ktype17 = 0;
            $_vtype18 = 0;
            $xfer += $input->readMapBegin($_ktype17, $_vtype18, $_size16);
            for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
            {
              $key21 = '';
              $val22 = new \gen_php\struceType();
              $xfer += $input->readString($key21);
              $val22 = new \gen_php\struceType();
              $xfer += $val22->read($input);
              $this->data[$key21] = $val22;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('responseType');
    if ($this->errno !== null) {
      $xfer += $output->writeFieldBegin('errno', TType::I32, 1);
      $xfer += $output->writeI32($this->errno);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errmsg !== null) {
      $xfer += $output->writeFieldBegin('errmsg', TType::STRING, 2);
      $xfer += $output->writeString($this->errmsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $kiter23 => $viter24)
          {
            $xfer += $output->writeString($kiter23);
            $xfer += $viter24->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


