/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gongmh.gen_java;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class requestType implements org.apache.thrift.TBase<requestType, requestType._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestType");

  private static final org.apache.thrift.protocol.TField ONE_FIELD_DESC = new org.apache.thrift.protocol.TField("one", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TWO_FIELD_DESC = new org.apache.thrift.protocol.TField("two", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField THREE_FIELD_DESC = new org.apache.thrift.protocol.TField("three", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField FOUR_FIELD_DESC = new org.apache.thrift.protocol.TField("four", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("five", org.apache.thrift.protocol.TType.MAP, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new requestTypeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new requestTypeTupleSchemeFactory());
  }

  public int one; // required
  public String two; // required
  public List<String> three; // optional
  /**
   * 
   * @see enumType
   */
  public enumType four; // optional
  public Map<String,String> five; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ONE((short)1, "one"),
    TWO((short)2, "two"),
    THREE((short)3, "three"),
    /**
     * 
     * @see enumType
     */
    FOUR((short)4, "four"),
    FIVE((short)5, "five");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ONE
          return ONE;
        case 2: // TWO
          return TWO;
        case 3: // THREE
          return THREE;
        case 4: // FOUR
          return FOUR;
        case 5: // FIVE
          return FIVE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ONE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.THREE,_Fields.FOUR,_Fields.FIVE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ONE, new org.apache.thrift.meta_data.FieldMetaData("one", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TWO, new org.apache.thrift.meta_data.FieldMetaData("two", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THREE, new org.apache.thrift.meta_data.FieldMetaData("three", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FOUR, new org.apache.thrift.meta_data.FieldMetaData("four", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, enumType.class)));
    tmpMap.put(_Fields.FIVE, new org.apache.thrift.meta_data.FieldMetaData("five", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestType.class, metaDataMap);
  }

  public requestType() {
    this.four = com.gongmh.gen_java.enumType.FIRST;

  }

  public requestType(
    int one,
    String two)
  {
    this();
    this.one = one;
    setOneIsSet(true);
    this.two = two;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public requestType(requestType other) {
    __isset_bitfield = other.__isset_bitfield;
    this.one = other.one;
    if (other.isSetTwo()) {
      this.two = other.two;
    }
    if (other.isSetThree()) {
      List<String> __this__three = new ArrayList<String>();
      for (String other_element : other.three) {
        __this__three.add(other_element);
      }
      this.three = __this__three;
    }
    if (other.isSetFour()) {
      this.four = other.four;
    }
    if (other.isSetFive()) {
      Map<String,String> __this__five = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.five.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__five_copy_key = other_element_key;

        String __this__five_copy_value = other_element_value;

        __this__five.put(__this__five_copy_key, __this__five_copy_value);
      }
      this.five = __this__five;
    }
  }

  public requestType deepCopy() {
    return new requestType(this);
  }

  @Override
  public void clear() {
    setOneIsSet(false);
    this.one = 0;
    this.two = null;
    this.three = null;
    this.four = com.gongmh.gen_java.enumType.FIRST;

    this.five = null;
  }

  public int getOne() {
    return this.one;
  }

  public requestType setOne(int one) {
    this.one = one;
    setOneIsSet(true);
    return this;
  }

  public void unsetOne() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ONE_ISSET_ID);
  }

  /** Returns true if field one is set (has been assigned a value) and false otherwise */
  public boolean isSetOne() {
    return EncodingUtils.testBit(__isset_bitfield, __ONE_ISSET_ID);
  }

  public void setOneIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ONE_ISSET_ID, value);
  }

  public String getTwo() {
    return this.two;
  }

  public requestType setTwo(String two) {
    this.two = two;
    return this;
  }

  public void unsetTwo() {
    this.two = null;
  }

  /** Returns true if field two is set (has been assigned a value) and false otherwise */
  public boolean isSetTwo() {
    return this.two != null;
  }

  public void setTwoIsSet(boolean value) {
    if (!value) {
      this.two = null;
    }
  }

  public int getThreeSize() {
    return (this.three == null) ? 0 : this.three.size();
  }

  public java.util.Iterator<String> getThreeIterator() {
    return (this.three == null) ? null : this.three.iterator();
  }

  public void addToThree(String elem) {
    if (this.three == null) {
      this.three = new ArrayList<String>();
    }
    this.three.add(elem);
  }

  public List<String> getThree() {
    return this.three;
  }

  public requestType setThree(List<String> three) {
    this.three = three;
    return this;
  }

  public void unsetThree() {
    this.three = null;
  }

  /** Returns true if field three is set (has been assigned a value) and false otherwise */
  public boolean isSetThree() {
    return this.three != null;
  }

  public void setThreeIsSet(boolean value) {
    if (!value) {
      this.three = null;
    }
  }

  /**
   * 
   * @see enumType
   */
  public enumType getFour() {
    return this.four;
  }

  /**
   * 
   * @see enumType
   */
  public requestType setFour(enumType four) {
    this.four = four;
    return this;
  }

  public void unsetFour() {
    this.four = null;
  }

  /** Returns true if field four is set (has been assigned a value) and false otherwise */
  public boolean isSetFour() {
    return this.four != null;
  }

  public void setFourIsSet(boolean value) {
    if (!value) {
      this.four = null;
    }
  }

  public int getFiveSize() {
    return (this.five == null) ? 0 : this.five.size();
  }

  public void putToFive(String key, String val) {
    if (this.five == null) {
      this.five = new HashMap<String,String>();
    }
    this.five.put(key, val);
  }

  public Map<String,String> getFive() {
    return this.five;
  }

  public requestType setFive(Map<String,String> five) {
    this.five = five;
    return this;
  }

  public void unsetFive() {
    this.five = null;
  }

  /** Returns true if field five is set (has been assigned a value) and false otherwise */
  public boolean isSetFive() {
    return this.five != null;
  }

  public void setFiveIsSet(boolean value) {
    if (!value) {
      this.five = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ONE:
      if (value == null) {
        unsetOne();
      } else {
        setOne((Integer)value);
      }
      break;

    case TWO:
      if (value == null) {
        unsetTwo();
      } else {
        setTwo((String)value);
      }
      break;

    case THREE:
      if (value == null) {
        unsetThree();
      } else {
        setThree((List<String>)value);
      }
      break;

    case FOUR:
      if (value == null) {
        unsetFour();
      } else {
        setFour((enumType)value);
      }
      break;

    case FIVE:
      if (value == null) {
        unsetFive();
      } else {
        setFive((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ONE:
      return Integer.valueOf(getOne());

    case TWO:
      return getTwo();

    case THREE:
      return getThree();

    case FOUR:
      return getFour();

    case FIVE:
      return getFive();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ONE:
      return isSetOne();
    case TWO:
      return isSetTwo();
    case THREE:
      return isSetThree();
    case FOUR:
      return isSetFour();
    case FIVE:
      return isSetFive();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof requestType)
      return this.equals((requestType)that);
    return false;
  }

  public boolean equals(requestType that) {
    if (that == null)
      return false;

    boolean this_present_one = true;
    boolean that_present_one = true;
    if (this_present_one || that_present_one) {
      if (!(this_present_one && that_present_one))
        return false;
      if (this.one != that.one)
        return false;
    }

    boolean this_present_two = true && this.isSetTwo();
    boolean that_present_two = true && that.isSetTwo();
    if (this_present_two || that_present_two) {
      if (!(this_present_two && that_present_two))
        return false;
      if (!this.two.equals(that.two))
        return false;
    }

    boolean this_present_three = true && this.isSetThree();
    boolean that_present_three = true && that.isSetThree();
    if (this_present_three || that_present_three) {
      if (!(this_present_three && that_present_three))
        return false;
      if (!this.three.equals(that.three))
        return false;
    }

    boolean this_present_four = true && this.isSetFour();
    boolean that_present_four = true && that.isSetFour();
    if (this_present_four || that_present_four) {
      if (!(this_present_four && that_present_four))
        return false;
      if (!this.four.equals(that.four))
        return false;
    }

    boolean this_present_five = true && this.isSetFive();
    boolean that_present_five = true && that.isSetFive();
    if (this_present_five || that_present_five) {
      if (!(this_present_five && that_present_five))
        return false;
      if (!this.five.equals(that.five))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(requestType other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    requestType typedOther = (requestType)other;

    lastComparison = Boolean.valueOf(isSetOne()).compareTo(typedOther.isSetOne());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOne()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.one, typedOther.one);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTwo()).compareTo(typedOther.isSetTwo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTwo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.two, typedOther.two);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThree()).compareTo(typedOther.isSetThree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.three, typedOther.three);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFour()).compareTo(typedOther.isSetFour());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFour()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.four, typedOther.four);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFive()).compareTo(typedOther.isSetFive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.five, typedOther.five);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("requestType(");
    boolean first = true;

    sb.append("one:");
    sb.append(this.one);
    first = false;
    if (!first) sb.append(", ");
    sb.append("two:");
    if (this.two == null) {
      sb.append("null");
    } else {
      sb.append(this.two);
    }
    first = false;
    if (isSetThree()) {
      if (!first) sb.append(", ");
      sb.append("three:");
      if (this.three == null) {
        sb.append("null");
      } else {
        sb.append(this.three);
      }
      first = false;
    }
    if (isSetFour()) {
      if (!first) sb.append(", ");
      sb.append("four:");
      if (this.four == null) {
        sb.append("null");
      } else {
        sb.append(this.four);
      }
      first = false;
    }
    if (isSetFive()) {
      if (!first) sb.append(", ");
      sb.append("five:");
      if (this.five == null) {
        sb.append("null");
      } else {
        sb.append(this.five);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'one' because it's a primitive and you chose the non-beans generator.
    if (two == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'two' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class requestTypeStandardSchemeFactory implements SchemeFactory {
    public requestTypeStandardScheme getScheme() {
      return new requestTypeStandardScheme();
    }
  }

  private static class requestTypeStandardScheme extends StandardScheme<requestType> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, requestType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ONE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.one = iprot.readI32();
              struct.setOneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TWO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.two = iprot.readString();
              struct.setTwoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // THREE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.three = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2; // required
                  _elem2 = iprot.readString();
                  struct.three.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setThreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FOUR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.four = enumType.findByValue(iprot.readI32());
              struct.setFourIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                struct.five = new HashMap<String,String>(2*_map3.size);
                for (int _i4 = 0; _i4 < _map3.size; ++_i4)
                {
                  String _key5; // required
                  String _val6; // required
                  _key5 = iprot.readString();
                  _val6 = iprot.readString();
                  struct.five.put(_key5, _val6);
                }
                iprot.readMapEnd();
              }
              struct.setFiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetOne()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'one' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, requestType struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ONE_FIELD_DESC);
      oprot.writeI32(struct.one);
      oprot.writeFieldEnd();
      if (struct.two != null) {
        oprot.writeFieldBegin(TWO_FIELD_DESC);
        oprot.writeString(struct.two);
        oprot.writeFieldEnd();
      }
      if (struct.three != null) {
        if (struct.isSetThree()) {
          oprot.writeFieldBegin(THREE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.three.size()));
            for (String _iter7 : struct.three)
            {
              oprot.writeString(_iter7);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.four != null) {
        if (struct.isSetFour()) {
          oprot.writeFieldBegin(FOUR_FIELD_DESC);
          oprot.writeI32(struct.four.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.five != null) {
        if (struct.isSetFive()) {
          oprot.writeFieldBegin(FIVE_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.five.size()));
            for (Map.Entry<String, String> _iter8 : struct.five.entrySet())
            {
              oprot.writeString(_iter8.getKey());
              oprot.writeString(_iter8.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class requestTypeTupleSchemeFactory implements SchemeFactory {
    public requestTypeTupleScheme getScheme() {
      return new requestTypeTupleScheme();
    }
  }

  private static class requestTypeTupleScheme extends TupleScheme<requestType> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, requestType struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.one);
      oprot.writeString(struct.two);
      BitSet optionals = new BitSet();
      if (struct.isSetThree()) {
        optionals.set(0);
      }
      if (struct.isSetFour()) {
        optionals.set(1);
      }
      if (struct.isSetFive()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetThree()) {
        {
          oprot.writeI32(struct.three.size());
          for (String _iter9 : struct.three)
          {
            oprot.writeString(_iter9);
          }
        }
      }
      if (struct.isSetFour()) {
        oprot.writeI32(struct.four.getValue());
      }
      if (struct.isSetFive()) {
        {
          oprot.writeI32(struct.five.size());
          for (Map.Entry<String, String> _iter10 : struct.five.entrySet())
          {
            oprot.writeString(_iter10.getKey());
            oprot.writeString(_iter10.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, requestType struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.one = iprot.readI32();
      struct.setOneIsSet(true);
      struct.two = iprot.readString();
      struct.setTwoIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list11 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.three = new ArrayList<String>(_list11.size);
          for (int _i12 = 0; _i12 < _list11.size; ++_i12)
          {
            String _elem13; // required
            _elem13 = iprot.readString();
            struct.three.add(_elem13);
          }
        }
        struct.setThreeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.four = enumType.findByValue(iprot.readI32());
        struct.setFourIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.five = new HashMap<String,String>(2*_map14.size);
          for (int _i15 = 0; _i15 < _map14.size; ++_i15)
          {
            String _key16; // required
            String _val17; // required
            _key16 = iprot.readString();
            _val17 = iprot.readString();
            struct.five.put(_key16, _val17);
          }
        }
        struct.setFiveIsSet(true);
      }
    }
  }

}

