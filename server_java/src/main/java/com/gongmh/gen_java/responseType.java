/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gongmh.gen_java;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class responseType implements org.apache.thrift.TBase<responseType, responseType._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("responseType");

  private static final org.apache.thrift.protocol.TField ERRNO_FIELD_DESC = new org.apache.thrift.protocol.TField("errno", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ERRMSG_FIELD_DESC = new org.apache.thrift.protocol.TField("errmsg", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new responseTypeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new responseTypeTupleSchemeFactory());
  }

  public int errno; // required
  public String errmsg; // required
  public Map<String,struceType> data; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ERRNO((short)1, "errno"),
    ERRMSG((short)2, "errmsg"),
    DATA((short)3, "data");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ERRNO
          return ERRNO;
        case 2: // ERRMSG
          return ERRMSG;
        case 3: // DATA
          return DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ERRNO_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ERRNO, new org.apache.thrift.meta_data.FieldMetaData("errno", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ERRMSG, new org.apache.thrift.meta_data.FieldMetaData("errmsg", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, struceType.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(responseType.class, metaDataMap);
  }

  public responseType() {
    this.errno = 0;

    this.errmsg = "OK";

  }

  public responseType(
    int errno,
    String errmsg,
    Map<String,struceType> data)
  {
    this();
    this.errno = errno;
    setErrnoIsSet(true);
    this.errmsg = errmsg;
    this.data = data;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public responseType(responseType other) {
    __isset_bitfield = other.__isset_bitfield;
    this.errno = other.errno;
    if (other.isSetErrmsg()) {
      this.errmsg = other.errmsg;
    }
    if (other.isSetData()) {
      Map<String,struceType> __this__data = new HashMap<String,struceType>();
      for (Map.Entry<String, struceType> other_element : other.data.entrySet()) {

        String other_element_key = other_element.getKey();
        struceType other_element_value = other_element.getValue();

        String __this__data_copy_key = other_element_key;

        struceType __this__data_copy_value = new struceType(other_element_value);

        __this__data.put(__this__data_copy_key, __this__data_copy_value);
      }
      this.data = __this__data;
    }
  }

  public responseType deepCopy() {
    return new responseType(this);
  }

  @Override
  public void clear() {
    this.errno = 0;

    this.errmsg = "OK";

    this.data = null;
  }

  public int getErrno() {
    return this.errno;
  }

  public responseType setErrno(int errno) {
    this.errno = errno;
    setErrnoIsSet(true);
    return this;
  }

  public void unsetErrno() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERRNO_ISSET_ID);
  }

  /** Returns true if field errno is set (has been assigned a value) and false otherwise */
  public boolean isSetErrno() {
    return EncodingUtils.testBit(__isset_bitfield, __ERRNO_ISSET_ID);
  }

  public void setErrnoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERRNO_ISSET_ID, value);
  }

  public String getErrmsg() {
    return this.errmsg;
  }

  public responseType setErrmsg(String errmsg) {
    this.errmsg = errmsg;
    return this;
  }

  public void unsetErrmsg() {
    this.errmsg = null;
  }

  /** Returns true if field errmsg is set (has been assigned a value) and false otherwise */
  public boolean isSetErrmsg() {
    return this.errmsg != null;
  }

  public void setErrmsgIsSet(boolean value) {
    if (!value) {
      this.errmsg = null;
    }
  }

  public int getDataSize() {
    return (this.data == null) ? 0 : this.data.size();
  }

  public void putToData(String key, struceType val) {
    if (this.data == null) {
      this.data = new HashMap<String,struceType>();
    }
    this.data.put(key, val);
  }

  public Map<String,struceType> getData() {
    return this.data;
  }

  public responseType setData(Map<String,struceType> data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ERRNO:
      if (value == null) {
        unsetErrno();
      } else {
        setErrno((Integer)value);
      }
      break;

    case ERRMSG:
      if (value == null) {
        unsetErrmsg();
      } else {
        setErrmsg((String)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((Map<String,struceType>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ERRNO:
      return Integer.valueOf(getErrno());

    case ERRMSG:
      return getErrmsg();

    case DATA:
      return getData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ERRNO:
      return isSetErrno();
    case ERRMSG:
      return isSetErrmsg();
    case DATA:
      return isSetData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof responseType)
      return this.equals((responseType)that);
    return false;
  }

  public boolean equals(responseType that) {
    if (that == null)
      return false;

    boolean this_present_errno = true;
    boolean that_present_errno = true;
    if (this_present_errno || that_present_errno) {
      if (!(this_present_errno && that_present_errno))
        return false;
      if (this.errno != that.errno)
        return false;
    }

    boolean this_present_errmsg = true && this.isSetErrmsg();
    boolean that_present_errmsg = true && that.isSetErrmsg();
    if (this_present_errmsg || that_present_errmsg) {
      if (!(this_present_errmsg && that_present_errmsg))
        return false;
      if (!this.errmsg.equals(that.errmsg))
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(responseType other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    responseType typedOther = (responseType)other;

    lastComparison = Boolean.valueOf(isSetErrno()).compareTo(typedOther.isSetErrno());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrno()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errno, typedOther.errno);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrmsg()).compareTo(typedOther.isSetErrmsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrmsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errmsg, typedOther.errmsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData()).compareTo(typedOther.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, typedOther.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("responseType(");
    boolean first = true;

    sb.append("errno:");
    sb.append(this.errno);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errmsg:");
    if (this.errmsg == null) {
      sb.append("null");
    } else {
      sb.append(this.errmsg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
      sb.append(this.data);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'errno' because it's a primitive and you chose the non-beans generator.
    if (errmsg == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'errmsg' was not present! Struct: " + toString());
    }
    if (data == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'data' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class responseTypeStandardSchemeFactory implements SchemeFactory {
    public responseTypeStandardScheme getScheme() {
      return new responseTypeStandardScheme();
    }
  }

  private static class responseTypeStandardScheme extends StandardScheme<responseType> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, responseType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ERRNO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.errno = iprot.readI32();
              struct.setErrnoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERRMSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errmsg = iprot.readString();
              struct.setErrmsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map18 = iprot.readMapBegin();
                struct.data = new HashMap<String,struceType>(2*_map18.size);
                for (int _i19 = 0; _i19 < _map18.size; ++_i19)
                {
                  String _key20; // required
                  struceType _val21; // required
                  _key20 = iprot.readString();
                  _val21 = new struceType();
                  _val21.read(iprot);
                  struct.data.put(_key20, _val21);
                }
                iprot.readMapEnd();
              }
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetErrno()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'errno' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, responseType struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ERRNO_FIELD_DESC);
      oprot.writeI32(struct.errno);
      oprot.writeFieldEnd();
      if (struct.errmsg != null) {
        oprot.writeFieldBegin(ERRMSG_FIELD_DESC);
        oprot.writeString(struct.errmsg);
        oprot.writeFieldEnd();
      }
      if (struct.data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.data.size()));
          for (Map.Entry<String, struceType> _iter22 : struct.data.entrySet())
          {
            oprot.writeString(_iter22.getKey());
            _iter22.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class responseTypeTupleSchemeFactory implements SchemeFactory {
    public responseTypeTupleScheme getScheme() {
      return new responseTypeTupleScheme();
    }
  }

  private static class responseTypeTupleScheme extends TupleScheme<responseType> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, responseType struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.errno);
      oprot.writeString(struct.errmsg);
      {
        oprot.writeI32(struct.data.size());
        for (Map.Entry<String, struceType> _iter23 : struct.data.entrySet())
        {
          oprot.writeString(_iter23.getKey());
          _iter23.getValue().write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, responseType struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.errno = iprot.readI32();
      struct.setErrnoIsSet(true);
      struct.errmsg = iprot.readString();
      struct.setErrmsgIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map24 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.data = new HashMap<String,struceType>(2*_map24.size);
        for (int _i25 = 0; _i25 < _map24.size; ++_i25)
        {
          String _key26; // required
          struceType _val27; // required
          _key26 = iprot.readString();
          _val27 = new struceType();
          _val27.read(iprot);
          struct.data.put(_key26, _val27);
        }
      }
      struct.setDataIsSet(true);
    }
  }

}

